#!/bin/bash

# @Author Tom Honig tom.honig@bricco.se
#
# git commit-msg hook
#
# Creates a JIRA issue if the commit starts with the deffined JIRA project Key followed by a space and Issue summary.
# The Issue number is then appended to the project Key, which makes it possible to use "jira smart commits" 
# https://confluence.atlassian.com/display/Cloud/Processing+JIRA+issues+with+commit+messages
#


# We store the configuration we need as git config variables
# Maybe not the best way to store the password... 
# 
# @ jira.project = JIRA project Key, e.g. JRE
# @ jira.user = JIRA Username, e.g. admin.anderssson
# @ jira.password = JIRA password
# @ jira.url = https://mycompany.atlassian.net

VARS=('project' 'user' 'password' 'url')
ERROR_MESSAGE=""

for NAME in ${VARS[@]}; do
    eval $NAME="$(git config --get jira.$NAME)"
    if [[ "${!NAME}" == "" ]]; then
      ERROR_MESSAGE="$ERROR_MESSAGE\ngit config --add jira.$NAME <$NAME>"
    fi
done

if [[ "$ERROR_MESSAGE" != "" ]]; then
  echo -e "Unable to connect to JIRA. Fix the following configuration:$ERROR_MESSAGE"
  exit 0
fi

# Check if the commit message starts with the project key.
MESSAGE=$(grep "^$project " $1);

if [[ "$MESSAGE" == "" ]]; then
  exit 0
fi

# Fetch the issue Summary = the text after the project Key and until the end or the first hashtag.
SUMMARY=$(echo $MESSAGE | sed "s/$project \([^#]*\).*/\1/g" | sed 's/ *$//g')

if [[ "$SUMMARY" == "$MESSAGE" || "$SUMMARY" == "" ]]; then
  echo "[ERROR] Couldn't parse an issue summary from $MESSAGE"
  exit 0
fi


# Create the issue with JIRA REST API 
# See the documentation: https://developer.atlassian.com/jiradev/api-reference/jira-rest-apis

# Store the json data in a temporary file.
FILENAME="/tmp/jira_tmp.json"

echo "{
   \"fields\": {
      \"project\": { 
          \"key\": \"$project\"
       },
       \"summary\": \"$SUMMARY\",
       \"description\": \"\",
       \"assignee\": {
       	  \"name\": \"$user\" 
       },  
       \"reporter\": {
          \"name\": \"$user\" 
       },  
       \"issuetype\": {
          \"name\": \"Task\"
       }      
    }
}" > $FILENAME

RESPONSE=$(curl -sb -D- -u $user:$password -X POST --data "@$FILENAME" -H "Content-Type: application/json" "$url/rest/api/2/issue/")

# Fetch the issue key from the json response
KEY=$(echo $RESPONSE | sed "s/.*\"key\":\"\([^\"]*\)\".*/\1/g");

rm $FILENAME

if [[ "$KEY" == "" || "$KEY" == "$RESPONSE"]]; then
  echo "[ERROR] Couldn't create the issue: $RESPONSE"
  exit 0
fi

# Append the correct issue-number to the commit message.
cat $1 | sed -e "s/^$project /$KEY /g" > $1

echo -e "[CREATED $KEY] $url/browse/$KEY"

exit 0
